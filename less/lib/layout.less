#grid (@initColumns:12, @initColumnWidth:60px, @initGutters:40px, @fluid:0) {
	
	@columns: 			@initColumns;
	@gutters: 			@initGutters;
	@modules: 			@initColumnWidth; 
	@systemWidth: 	@columns * (@modules + @gutters) *1px;
	@tempWidth:     ~`('@{fluid}'.length > 1) ? 'fluid' : 'systemWidth'`;
	@gridWidth:			@@tempWidth;

	.container (@width:@gridWidth) {
		max-width:@width;
		margin:0 auto;
		overflow:hidden;
	}
	
	.classes () {
		.row { display: block; overflow:hidden; }		
		.column {	display:inline; float:left; overflow:hidden; }
	}
	
	.row (@columns:@columns) {
		@expMargin: 	@gridWidth * ( ( (@gutters * .5) / @systemWidth) * -1);
		@expWidth: 		@gridWidth * ( (@gutters + @systemWidth) /@systemWidth);
		
		margin: 0 @expMargin;
		width: @expWidth;
	}
	
	.span (@x:1, @columns:@columns) {
		@expMargin: 	@gridWidth * ( (@gutters * .5) / @systemWidth);
		@expWidth: 		@gridWidth * ((((@gutters+@modules) * @x) - @gutters) / @systemWidth);

		margin:0 @expMargin;
		width:@expWidth;
	}

	.offset (@x: 1) {
		@exp: 				@gridWidth * ((((@gutters+@modules) * @x) - @gutters) / @systemWidth);

		margin-left: @exp;
	}

	
}

//dimensions
.dim(@h:100%, @w:100%) 	{ height:@h; width:@w; }
.square(@1: 100%) 			{ .dim(@1, @1); }

#pos {
	.tr(@1, @2) { top:@1; right:@2; }
	.bl(@1, @2) { bottom:@1; left:@2;}
}

.origin() { left:0; top:0; }

.box-size( @type:border ){
	@var: ~`"@{type}"+"-box"`;
	-moz-box-sizing: @var;
	-o-box-sizing: @var;
	-webkit-box-sizing: @var;
	box-sizing: @var;			
}
//columns
#columns (@a:2, @b:(@baseline/2), @c:auto, @d:none) {


	@columnCount: 	@a;
	@columnGap:			@b;
	@columnWidth:		@c;
	@columnRule: 		@d;

	
	.set (@count:@columnCount, @gap:@columnGap) {
		-moz-column-count: @count;
		-moz-column-gap: @gap;
		-webkit-column-count: @count;
		-webkit-column-gap: @gap;
		column-count: @count;
		column-gap: @gap;
	}

	
	.setWidth (@width:@columnWidth) {
		-moz-column-width:@width;
		-webkit-column-width:@width;
		column-width:@width;				
	}

	
	.setRule (@rule:@columnRule) {
		-moz-column-rule:@rule;
		-webkit-column-rule:@rule;
		column-rule:@rule;				
	}

	
	.setSpan (@span:all) {
		-moz-column-span: @span;
		-webkit-column-span: @span;
		column-span: @span;			
	}
	
	
} 

#flexbox {


	.align (@align: stretch) { //start | end | center | baseline | stetch
		-moz-box-align: @align;
		-ms-box-align: @align;
		-webkit-box-align: @align;
		box-align: @align;						
	}	
	
	
	.direction (@dir: normal) { // normal | reverse | inherit
		-moz-box-direction: @dir;
		-ms-box-direction: @dir;
		-webkit-box-direction: @dir;
		box-direction: @dir;						
	}


	.display () {
		display:-moz-box;
		display:-ms-box;
		display:-webkit-box;
		display:box;
	}
	
	
	.flex (@flex: 0 ) { // [integer]
		-moz-box-flex: @flex;
		-ms-box-flex: @flex;
		-webkit-box-flex: @flex;
		box-flex: @flex;						
	}
	
	
	.flex-group (@group: 1) { // [integer]
		-moz-box-flex-group:@group;
		-ms-box-flex-group:@group;
		-webkit-box-flex-group:@group;
		box-flex-group:@group;						
	}


	.ordinal-group (@og:1) { // [integer]
		-moz-box-ordinal-group:@og;
		-ms-box-ordinal-group:@og;
		-webkit-box-ordinal-group:@og;
		box-ordinal-group:@og;					
	}

	
	.orient (@o: horizontal) { // horizontal | vertical | inline-axis | block-axis | inherit
		-moz-box-orient: @o;
		-ms-box-orient: @o;
		-webkit-box-orient: @o;
		box-orient: @o;						
	}
	

	.pack (@pack: start) { // start | end | center | justify
		-moz-box-pack: @pack;
		-ms-box-pack: @pack;
		-webkit-box-pack: @pack;
		box-pack: @pack;						
	}


}



